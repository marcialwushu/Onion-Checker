#!/bin/bash

################################################################################
#                      ____        _                                           #
#                     / __ \      (_)                                          #
#                    | |  | |_ __  _  ___  _ __                                #
#                    | |  | | '_ \| |/ _ \| '_ \                               #
#                    | |__| | | | | | (_) | | | |                              #
#                     \____/|_| |_|_|\___/|_|_|_|                              #
#                    / ____| |             | |                                 #
#                   | |    | |__   ___  ___| | _____ _ __                      #
#                   | |    | '_ \ / _ \/ __| |/ / _ \ '__|                     #
#                   | |____| | | |  __/ (__|   <  __/ |                        #
#                    \_____|_| |_|\___|\___|_|\_\___|_|                        #
#                                                                              #
# Easily organize your file with multiple links from Tor Network and test      #
# if they are online.                                                          #
# Developer: Jesus 'Jay-C'                                                     #
# GitHub Page: https://github.com/JesusFromHellz/                              #
# Sistema base: Debian Jessie                                                  #
# Dependências: tor   torsocks  curl    coreutils                              #
################################################################################


banner () { #Simplesmente exibe o banner da aplicação
  echo ""
  echo ""
  echo ""
  echo ""
  echo ""
  echo ""
  echo "Be welcome to the ..."
  echo ""
  echo ".d88888b.            d8b";
  echo "d88P\" \"Y88b          Y8P";
  echo "888     888";
  echo "888     888 88888b.  888  .d88b.  88888b.";
  echo "888     888 888 \"88b 888 d88\"\"88b 888 \"88b";
  echo "888     888 888  888 888 888  888 888  888";
  echo "Y88b. .d88P 888  888 888 Y88..88P 888  888";
  echo  " \"Y88888P\"  888  888 888  \"Y88P\"  888  888";
  echo "";
  echo "";
  echo "                                                                 888";
  echo " .d8888b.  888                        888                        888";
  echo "d88P  Y88b 888                        888                        888";
  echo "888    888 888                        888                        888";
  echo "888        88888b.   .d88b.   .d8888b 888  888  .d88b.  888d888  888";
  echo "888        888  88b d8P  Y8b d88P\"    888 .88P d8P  Y8b 888P     888";
  echo "888    888 888  888 88888888 888      888888K  88888888 888 ";
  echo "Y88b  d88P 888  888 Y8b.     Y88b.    888 \"88b Y8b.     888      d8p";
  echo " \"Y8888P\"  888  888  \"Y8888   \"Y8888P 888  888  \"Y8888  888      Y8P"
  echo ""
  sleep 2;
  echo "" && sleep 0.1
  echo "" && sleep 0.1
  echo "" && sleep 0.1
  echo "" && sleep 0.1
  echo "" && sleep 0.1
  echo "" && sleep 0.1
  echo "" && sleep 0.1
  echo "" && sleep 0.1
  echo "Developer: Jesus 'Jay-C'"
  echo "" && sleep 0.1
  echo "GitHub page: https://github.com/JesusFromHellz"
  echo "" && sleep 0.1
  echo "" && sleep 0.1
  echo "" && sleep 0.1
  echo "" && sleep 0.1
}
#Início das variáveis globais
tore="";
cnt="";
a2e="";
version="0.2.3";
defvar () { #Define se o tor já está rodando
  torr=$(ps aux | grep -w tor | grep -v grep | grep -v onion-checker);
}
#Fim das variáveis globais

version () {
  echo "Build da versão $version"; exit 0
}

torcheck () { #Checa se o tor está presente no computador.
  tor --help 1> /dev/null 2> /dev/null
  if [ "$?" == "127" ]; then
    tore="n"
  else
    tore="y"
  fi
}

stor () { #Exibe a existência ou não do Tor para o usuário
  if [ "$tore" == "n" ]; then
    echo -e "\nQue pena, o Tor não está instalado no seu computador. "
    echo -e "Para instalá-lo, digite:"
    echo -e "apt-get install tor\n(Para Linux)"
  else
    echo -e "\nParabéns, o Tor está corretamente instalado no seu "
    echo -e "computador. Assim sendo, poderá usufruir 100% desse"
    echo -e "programa.\n"
  fi
}

linkorg () { #Organiza um arquivo contendo links passados pelo usuário
last="${@: -1}"
if [[ "$#" == "0" ]]; then
  echo -e "\nUso: `basename $0` [-l|--link-org] [arquivos a serem organizados, separados por espaço] \
[arquivo destino| -st] (último arquivo tomado como destino)(se for -st, imprime na tela)\n"
elif [[ "$#" == "1" ]]; then
  echo -e "\nVocê esqueceu do arquivo de destino ..."
  echo -e "\n\nUso: `basename $0` [-l|--link-org] [arquivos a serem organizados, separados por espaço] \
[arquivo destino| -st] (último arquivo tomado como destino)(se for -st, imprime na tela)\n"
elif [[ "$#" -ge "2" ]] && [[ "$last" == "-st" ]]; then
  echo "Segundo elif"
  array="${@:1:$(($#-1))}"
  banner;
  echo -e "Exibindo a junção dos arquivos ${@:1:$(($#-1))} na tela ...\n"
  cat $array | sed '/^$/d'  |\
  sed -n '/................\.onion/p' |\
  sed -r 's/^.*http:\/\/\040(.*\.onion).*$/\1/' |\
  sed -r 's/^(.*)(................\.onion).*$/\2/' |\
  sort -u >&1
elif [[ "$#" -ge "2" ]] && [[ "$last" != "-st" ]];then
  echo "Terceiro elif"
array="${@:1:$(($#-1))}"
banner;
cat $array | sed '/^$/d'  |\
sed -n '/................\.onion/p' |\
sed -r 's/^.*http:\/\/\040(.*\.onion).*$/\1/' |\
sed -r 's/^(.*)(................\.onion).*$/\2/' |\
sort -u > $last
fi
}

starttor () { #Inicia o tor em segundo plano
  tor 1> /tmp/tor 2> /dev/null &
}

checktorrunning () { #Checa se o tor está rodando
  ((++counter));
  if [ "$torr" != "" ]; then
    rm -rf /tmp/tor 2> /dev/null; sleep 0;
    elif [ "$counter" == "3" ]; then
      echo 'Não foi possível iniciar o Tor, saindo ...';
      exit 2;
    else
      echo -e "\nO tor não encontra-se em funcionamento."
      echo -e '\nInicializando o circuito Tor, por favor aguarde ...';
        starttor;  sleep 10; defvar; checktorrunning;
        torr=$(cat /tmp/tor 2> /dev/null | grep Done)
  fi

}

checklink () { #Checa se os links estão online
url=$1
destino=$2
count=0;

if [ "$url" == "" ]; then # Testa se foram dados parametros pra flag
      echo -e "Uso: `basename $0` [-c|--check-link] [arquivo a ser testado] \
   [arquivo destino](opcional)\n"; exit 1
 elif [ "$destino" == "" ];then #Caso omitido o destino, dá um valor padrão
 #Não toma um arquivo existente como destino padrão pra links on, mas off sim.
   banner;
   destino="$HOME/linkson$(echo "$cnt").txt"; a2e=$(ls $HOME/linkson$(echo "$cnt").txt 2> /dev/null)
   while [[ "$a2e" != "" ]]; do
     ((++cnt)); destino="$HOME/linkson$(echo "$cnt").txt"; a2e=$(ls $HOME/linkson$(echo "$cnt").txt 2> /dev/null)
   done
   echo -e "Nome destino mantido padrão, escrevendo para arquivo $HOME/linkson$(echo "$cnt").txt\n"

else
  banner;
  echo "Lendo do arquivo $url para o arquivo $HOME/$destino."
fi
  echo 'Inicializando a checagem dos links...'
  echo ''
  . torsocks on 1> /dev/null #Inicia um shell com tráfego pelo tor
  echo "Que timeout você quer para que os links sejam dados como offline?"
  echo "Pressione enter para o valor padrão (20s)."
  echo "Ex: [10 | 20s | 30m | 1h | 3d] para segundo, minuto, hora e dia. "
  echo -e "Segundo é a unidade padrão, caso omitida a letra.\n"
  tout=""
  read tout
  if [[ "$tout" == "" ]]; then
    echo "Valor padrão para timeout: 20"
    tout="20"
  else
  while [[ ! $tout =~ ^[0-9]+[s|m|h|d]?$ ]] ; do #Checa a entrada do usuário
  #para a configuração do timeout do curl, para dar os links como offline
    echo -e "\n\nVocê precisa usar o padrão apresentado acima\n"; read tout
  done
fi
    echo -e "\n\nIniciando a checagem dos links...\n"
  while read url #Loop de testes em arquivo de múltiplas linhas
  do
      > /tmp/ochecker.txt;
      #Repassa o código de resposta do site pra variável e o conteúdo pro ochecker.txt
      urlstatus=$(timeout $(echo "$tout") curl -L -o /tmp/ochecker.txt --max-time 18 --write-out '%{http_code}' "$url" 2> /dev/null);
      #Pega do ochecker.txt o título encontrado
      title=$(cat /tmp/ochecker.txt | grep -iPo '(?<=<title>)(.*)(?=</title>)');
      rm -rf /tmp/ochecker.txt;
      ((++count));
      if [ "$urlstatus" == "000" ] || [ "$urlstatus" == "" ]; then #Loop teste pra link online ou offline
        echo "[$count] O link $url está offline."
        echo "$url - $urlstatus " >> "$HOME/linksoff.txt"
      else
        echo "[$count] O link $url está funcionando..."
      echo "$url - $urlstatus - $title" >> $destino
    fi
  done < "$url"
  . torsocks off 1> /dev/null #Desliga o tráfego do tor nessa shell
  rm -rf /tmp/ochecker.txt 2> /dev/null
}

joinlists () { #Une arquivos de texto em um único arquivo
last="${@: -1}"
  if [[ "$#" == "0" ]]; then
    echo -e "\nUso: `basename $0` [-j|--join-lists] [arquivos a serem unidos, separados por espaço]\
    [arquivo destino| -st]  (o último será o destino)(se for -st, imprime na tela)\n"
  elif [[ "$#" == "1" ]]; then
    echo -e "\nVocê esqueceu do arquivo de destino ..."
    echo -e "\n\nUso: `basename $0` [-j|--join-lists] [arquivos a serem unidos, separados por espaço]\
    [arquivo destino| -st]  (o último será o destino)(se for -st, imprime na tela)\n"
  elif [[ "$#" -ge "2" ]] && [[ "$last" == "-st" ]]; then
    last="${@: -1}"
    array="${@:1:$(($#-1))}"
    echo "Juntando o conteúdo dos arquivos ${@:1:$(($#-1))} ..."
    echo -e "\nE imprimindo o resultado na tela"
    cat $array >&1
elif [[ "$#" -ge "2" ]] && [[ "$last" != "-st" ]];then
  last="${@: -1}"
  array="${@:1:$(($#-1))}"
  echo "Juntando o conteúdo dos arquivos ${@:1:$(($#-1))} ..."
  echo -e "\nE criando como resultado ${@: -1}" #Mostra o último
  cat $array >> $last
fi
  }

  install () { #Instala o programa no computador
    installed=$(which onion-checker); #Existencia do arquivo no PATH
    if [[ "$installed" == "" ]];then
      echo "Nenhuma instalação encontrada, instalando..."
      sudo cp onion-checker /usr/bin/ && sudo cp onion-checker.bc /etc/bash_completion.d/ ; err=$(echo "$?");
      if [[ "$err" == "0" ]]; then #Checa se houve erro
        echo "onion-checker instalado com sucesso!";
      else
        echo "Um erro ocorreu durante a instalação, com código de erro $err";
        rm -rf /usr/bin/onion-checker 2> /dev/null
      fi
    elif [[ "$installed" == "/usr/bin/onion-checker" ]];then #Testa se ja existe
        echo "O onion-checker ja está instalado no seu computador"; err=$(echo "$?");
        vers=$(onion-checker -v | awk '{print $4}'); #Pega a versão do script instalado
          if [[ "$version" > "$vers" ]];then #Comparação das versões
            echo " A versão atual é mais recente que a instalada no computador,"
            echo "Atualizando ..."
            sudo cp -f onion-checker /usr/bin/onion-checker && sudo cp -f onion-checker.bc /etc/bash_completion.d/;
        elif [[ "$version" == "$vers" ]];then
          echo "A versão atual é a mesma que a instalada, saindo ..."
          exit 0
        elif [[ "$version" < "$vers" ]]; then
          echo "A versão atual é mais antiga que a instalada, saindo ..."
          exit 0
        fi
    fi
  }

  uninstall () { #Desinstalação do script do computador
    resp=""
    echo "Tem certeza que deseja desinstalar o programa? (y/N)";
    read resp;
    if [[ "$resp" == "" ]]; then
      echo -e "\nDesinstalação cancelada, abortando ...\n"
      exit 0
    else
      while [[ ! $resp =~ ^[y|n]$ ]] ; do #Espera por receber Y, N ou [Enter]
       echo -e "Você deve digitar Y ou N e pressionar Enter.\n";
       read resp;
       resp=$(echo $resp | tr A-Z a-z 2> /dev/null);
  done
    if [[ "$resp" == "y" ]]; then # Processo de desinstalação
      inst="";
      inst=$(ls /usr/bin/onion-checker 2> /dev/null)
      if [[ "$inst" == "" ]]; then
        echo "O programa do qual você usou essa função, não está instalado."
        exit 0
      elif [[ "$inst" == "/usr/bin/onion-checker" ]]; then
        sudo rm -rf /usr/bin/onion-checker /etc/bash_completion.d/onion-checker.bc
        ecode=$?
        if  [[ "$ecode" == 0 ]]; then
          echo "Exclusão bem-sucedida."
        else
          echo "Houve um problema na desinstalação do programa, com código de erro $ecode";
        fi
      fi
    else  #Aborta a desinstalação
      echo -e "\nDesinstalação cancelada, abortando ...\n"
      exit 0

  fi
fi
  }

  error () { #Ocorre caso a flag digitada não seja uma das especificadas
    echo ''
    echo "Opa, parece que você digitou uma flag inválida ... Dê uma olhada nas\
 possibilidades:"
    echo ''
    echo '-h ou --help            Mostra essa mensagem de ajuda;'
    echo '-l ou --link-org        Organiza os links de um arquivo;'
    echo '-b ou --banner          Exibe o banner e sai;'
    echo '-t ou --tor-check       Checa a existência do Tor no computador;'
    echo '-c ou --check-link      Checa por links online e manda cria'
    echo 'arquivo linkson.txt com os títulos e links online, caso'
    echo 'nenhum nome destino seja dado.'
    echo -e '-j ou --join-lists      Une arquivos contendo links ou outro\
  conteúdo'
    echo ''
  }

help () { #Imprime ajuda, padrão exibido se nenhuma flag é passada pro comando
  echo '' #ou se a flag -h | --help é passada.
  echo 'Olá! Seja bem-vindo(a) ao tópico de ajuda do Onion Checker.'
  echo 'Com esse software você poderá checar se links onion estão '
  echo 'funcionando. Abaixo você pode ver a lista de comandos dis-'
  echo 'poníveis.'
  echo 'Se algum comando precisar de argumento e não for dado, o  '
  echo 'mesmo apresentará a mensagem do uso correto.'
  echo ''
  echo '-h ou --help            Mostra essa mensagem de ajuda;'
  echo '-l ou --link-org        Organiza os links de um arquivo;'
  echo '-b ou --banner          Exibe o banner e sai;'
  echo '-t ou --tor-check       Checa a existência do Tor no computador;'
  echo '-c ou --check-link      Checa por links online e manda criar'
  echo 'arquivo linkson.txt com os títulos e links online, caso'
  echo 'nenhum nome destino seja dado.'
  echo -e '-j ou --join-lists      Une arquivos contendo links ou outro
conteúdo;'
  echo -e '--install          Transfere o programa para o diretório /usr/bin
  permitindo sua execução de forma global;'
  echo -e '--uninstall         Remove completamente o software do computador. '
  echo ''
}

#Testes condicionais de flags, acerca do uso do programa
if [ "$*" == "-h" ] || [ "$*" == "--help" ] || [ "$*" == "" ];
  then
    help;
  else
    case "$1" in
    -l | --link-org       ) shift; linkorg "$@" ; shift $#;       ;;
    -b | --banner         ) banner; exit 0;  shift;               ;;
    -t | --tor-check      ) torcheck; stor;                       ;;
    -c | --check-link     ) defvar; checktorrunning; checklink "$2" "$3"; shift          ;;
    -j | --join-lists     ) shift ; joinlists "$@" ; shift $# ;   ;;
    -v | --version        ) version; shift;                       ;;
     --install            ) install; shift;                       ;;
     --uninstall          ) uninstall; shift;                     ;;
    *                     ) error; exit 1;                        ;;
    esac
fi
